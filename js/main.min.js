jQuery(document).ready(function() {
  
  var $ = jQuery;
  var $mobileNavbar = jQuery('#mobile-navigation');
  var $hamburger = $('.hamburger-menu');
  var $window = $(window);

  //min height of page
  var chechContentHeight = function() {
    var windowHeight =  $(window).innerHeight();
    var windowPrimary = $('#primary').innerHeight();
    if (windowHeight > windowPrimary && $window.width() > 992) {
      $('#primary').height(windowHeight - $('#colophon').innerHeight());
    }

  }
  chechContentHeight();

  $('#show-core-team').on('click', function(){
    $('#core-team').toggle();
    $('#show-core-team').hide();
    $('#hide-core-team').show();
  });

  $('#hide-core-team').on('click', function(){
    $('#core-team').toggle();
    $('#show-core-team').show();
    $('#hide-core-team').hide();
  });

  // function adjustHamburger() {
  //   if ($window.width() > 992) {
  //     $navbar.show();
  //   }
  //   if ($window.width() <= 992 && $('.bar.animate').length == 0) {
  //     $navbar.hide();
  //   } 
  // }

  $hamburger.on('click', function () {
    $mobileNavbar.toggleClass('show');
    $('.bar').toggleClass('animate');
  });

  $('#mobile-menu').on('click', function(){
    $mobileNavbar.removeClass('show');
    $('.bar').removeClass('animate');
  });

  $window.resize(function () {
    // adjustHamburger();
    checkHeaderHeight();
    chechContentHeight();

    $('.ba-slider').each(function(){
      var cur = $(this);
      var width = cur.width()+'px';
      cur.find('.resize img').css('width', width);
    });
  });

  // PRODUCT SLIDER Call & init
  $('.ba-slider').each(function(){
    var cur = $(this);
    // Adjust the slider
    var width = cur.width()+'px';
    cur.find('.resize img').css('width', width);
    // Bind dragging events
    drags(cur.find('.handle'), cur.find('.resize'), cur);
  });

  function drags(dragElement, resizeElement, container) {


    // Initialize the dragging event on mousedown.
    dragElement.on('mousedown touchstart', function(e) {
      dragElement.addClass('draggable');
      resizeElement.addClass('resizable');
      
      // Check if it's a mouse or touch event and pass along the correct value
      var startX = (e.pageX) ? e.pageX : e.originalEvent.touches[0].pageX;
      
      // Get the initial position
      var dragWidth = dragElement.outerWidth(),
          posX = dragElement.offset().left + dragWidth - startX,
          containerOffset = container.offset().left,
          containerWidth = container.outerWidth();
   
      // Set limits
      minLeft = containerOffset + 10;
      maxLeft = containerOffset + containerWidth - dragWidth - 10;
      
      // Calculate the dragging distance on mousemove.
      dragElement.parents().on("mousemove touchmove", function(e) {
        
        // Check if it's a mouse or touch event and pass along the correct value
        var moveX = (e.pageX) ? e.pageX : e.originalEvent.touches[0].pageX;
        
        leftValue = moveX + posX - dragWidth;
        
        // Prevent going off limits
        if ( leftValue < minLeft) {
          leftValue = minLeft;
        } else if (leftValue > maxLeft) {
          leftValue = maxLeft;
        }
        
        // Translate the handle's left value to masked divs width.
        widthValue = (leftValue + dragWidth/2 - containerOffset)*100/containerWidth+'%';
        
        // Set the new values for the slider and the handle. 
        // Bind mouseup events to stop dragging.
        $('.draggable').css('left', widthValue).on('mouseup touchend touchcancel', function () {
          $(this).removeClass('draggable');
          resizeElement.removeClass('resizable');
        });
        $('.resizable').css('width', widthValue);
      }).on('mouseup touchend touchcancel', function(){
        dragElement.removeClass('draggable');
        resizeElement.removeClass('resizable');
      });
      e.preventDefault();
    }).on('mouseup touchend touchcancel', function(e){
      dragElement.removeClass('draggable');
      resizeElement.removeClass('resizable');
    });
  }

    /* Partners and Clients */
    var $partners = jQuery(".partners .members");
    var numOfSlides = jQuery(".partners .members li").length;
    var hasMembers = jQuery(".no-members").length == 1 ? false : true;

    if (hasMembers) {
        //Initialize Slick
        $partners.slick({
            arrows: true,
            infinite: true,
            autoplay: true,
            autoplaySpeed: 3000,
            slidesToShow: numOfSlides < 4 ? numOfSlides : 4,
            slidesToScroll: 1,
            accessibility: false,
            prevArrow: "<span class='arrow-left'><i class='fas fa-chevron-left'></i></span>",
            nextArrow: "<span class='arrow-right'><i class='fas fa-chevron-right'></i></span>",
            responsive: [
                {
                    breakpoint: 993,
                    settings: {
                        centerMode: false,
                        slidesToShow: 1,
                        slidesToScroll: 1
                    }
                },
            ]
        });
    }
    /* End Partners and Clients */
  var headerHeight;
  var checkHeaderHeight = function () {
    if ($window.width() > 992) {
      headerHeight = $('#masthead').innerHeight();
    } else {
      headerHeight = 0;
    }
  }

  checkHeaderHeight();

  // Select all links with hashes
  $('a[href*="#"]')
  // Remove links that don't actually link to anything
  .not('[href="#"]')
  .not('[href="#0"]')
  .click(function(event) {
    // On-page links
    if (
      location.pathname.replace(/^\//, '') == this.pathname.replace(/^\//, '') 
      && 
      location.hostname == this.hostname
    ) {
      // Figure out element to scroll to
      var target = $(this.hash);
      target = target.length ? target : $('[name=' + this.hash.slice(1) + ']');
      // Does a scroll target exist?
      if (target.length) {
        // Only prevent default if animation is actually gonna happen
        event.preventDefault();
        $('html, body').animate({
          scrollTop: target.offset().top - headerHeight + 1
        }, 1000, function() {
          // Callback after animation
          // Must change focus!
          var $target = $(target);
          $target.focus();
          if ($target.is(":focus")) { // Checking if the target was focused
            return false;
          } else {
            $target.attr('tabindex','-1'); // Adding tabindex for elements not focusable
            $target.focus(); // Set focus again
          };
        });
      }
    }
  });


  var $subscribe = jQuery("button[name=subscribe]");

  $subscribe.click(function(event) {
    event.preventDefault();

    var $form = jQuery(".newsletter form");
    var inputEmail = jQuery("input[name=email]").val();
    var $responsePlaceholder = jQuery(".newsletter .response-placeholder");

    if (inputEmail.length === 0) {
        $responsePlaceholder.empty();
        $responsePlaceholder.append("<label class='msg error'>The email field is mandatory.</label>");
        return;
    }

    jQuery.ajax({
        url: "/wp-content/themes/twognation-new/subscribe.php",
        method: "post",
        dataType: "text",
        data: {
            email: inputEmail
        }
    }).done(function(response) {
        $responsePlaceholder.empty();
        $responsePlaceholder.append(response);
        $form.each(function() {
            this.reset();
        });
    }).fail(function(response) {
        console.log(response);
    });
  });

  //scroll to top
  var $backToTop = $(".back-to-top");

  $(window).on('scroll', function() {
    if ($(this).scrollTop() > 100 && $window.width() > 992) {
      $backToTop.fadeIn();
    } else {
      $backToTop.fadeOut();
    }
  });

  //contact form 7
  document.addEventListener( 'wpcf7submit', function( event ) {
    if(event.detail.status === 'mail_sent') {
      $('#connectToTwogNation').modal('hide');
      $('#successModal').modal('show');
    }
  }, false );
  

});

